{"version":3,"sources":["Home.js","About.js","Contact.js","Projects.js","NoMatch.js","components/Layout.js","components/NaviBar.js","App.js","serviceWorker.js","index.js"],"names":["Home","About","Contact","Projects","NoMatch","Layout","props","Container","children","Styles","styled","div","NaviBar","Navbar","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Item","Link","App","Fragment","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAGaA,EAAO,kBACpB,6BACA,4CACA,+CACA,kDCLaC,EAAQ,kBACrB,6BACA,wCACA,iFACA,8GCJaC,EAAU,kBACvB,6BACA,0CACA,2DACA,0DACA,2CACA,oICNaC,EAAW,kBACxB,6BACA,qDACA,yCACA,oCACA,wCACA,6CACA,wCACA,6CACA,kDACA,qDACA,sDACA,8DACA,yCCbaC,EAAU,kBACvB,6BACA,0C,QCDaC,EAAQ,SAACC,GAAD,OAEpB,kBAACC,EAAA,EAAD,KACED,EAAME,W,qPCFT,IAAMC,E,MAASC,EAAOC,IAAV,KAYCC,EAAU,kBACvB,kBAACH,EAAD,KACE,kBAACI,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACpC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,0BACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,0BAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,UACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,aAAf,aACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,iBCMHQ,E,uKAlBb,OACA,kBAAC,IAAMC,SAAP,KACA,kBAAC,EAAD,MACI,kBAAC,EAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO6B,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,YAAYC,UAAW3B,IACnC,kBAAC,IAAD,CAAO0B,KAAK,WAAWC,UAAW5B,IAClC,kBAAC,IAAD,CAAO4B,UAAW1B,Y,GAZV2B,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b485a304.chunk.js","sourcesContent":["/*Home*/\r\nimport React from 'react';\r\n\r\nexport const Home = () => (\r\n<div>\r\n<h2>OSU Esports </h2>\r\n<p>LETS GO BEAVERS!</p>\r\n<p>ITS IN THE GAME! </p>\r\n</div>\r\n)\r\n","import React from 'react';\r\n\r\nexport const About = () => (\r\n<div>\r\n<h2>About us</h2>\r\n<p> WE are the oregon state beavers E-Sports center! </p>\r\n<p> We have fun while also attending school and making the best of college life.</p>\r\n</div>\r\n)\r\n","import React from 'react';\r\n\r\nexport const Contact = () => (\r\n<div>\r\n<h2>Contact Us</h2>\r\n<p>Email: shang@oregonstate.edu</p>\r\n<p>Phone Number: 541-908-4129 </p>\r\n<p>Social Media</p>\r\n<p>https://docs.google.com/forms/d/e/1FAIpQLSf8f2TZND1QWYOkXWjC1Bbo8Xhuyz4rNV0Yu9Ml93CoxS6TYA/viewform</p>\r\n</div>\r\n\r\n)\r\n","import React from 'react';\r\n\r\nexport const Projects = () => (\r\n<div>\r\n<h2>Oregon State Esports </h2>\r\n<p>Hearstone </p>\r\n<p>CS GO</p>\r\n<p>Overwatch</p>\r\n<p>Rocket league </p>\r\n<p>Valorant </p>\r\n<p>Team Fortress </p>\r\n<p>Magic the gathering</p>\r\n<p>and many more to come!</p>\r\n<p>join any team you like </p>\r\n<p>cheer for fellow school mates. </p>\r\n<p>GO BEAVS</p>\r\n\r\n</div>\r\n)\r\n","import React from 'react';\r\n\r\nexport const NoMatch = () => (\r\n<div>\r\n<h2>No Match</h2>\r\n\r\n</div>\r\n\r\n)\r\n","import React from 'react';\r\nimport{ Container } from 'react-bootstrap';\r\n\r\nexport const Layout= (props) =>(\r\n  \r\n <Container>\r\n  {props.children}\r\n  </Container>\r\n\r\n)\r\n","import React from 'react';\r\nimport{ Nav, Navbar} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .navbar{\r\n    background-color: #ADD8E6;\r\n  }\r\n  .navbar-brand,.navbar-nav,.nav-link {\r\n    color: #bbb;\r\n  &:hover{\r\n    color:white;\r\n\r\n  }\r\n  }\r\n`;\r\nexport const NaviBar = () => (\r\n<Styles>\r\n  <Navbar expand=\"1g\" bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"/\"> Oregon State Esports </Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"responisve-navbar-nav\"/>\r\n    <Navbar.Collapse id=\"responisve-navbar-nav\">\r\n      <Nav>\r\n        <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\r\n        <Nav.Item><Nav.Link href=\"/projects\">Projects</Nav.Link></Nav.Item>\r\n        <Nav.Item><Nav.Link href=\"/contact\">Contact</Nav.Link></Nav.Item>\r\n      </Nav>\r\n      </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n</Styles>\r\n)\r\n","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router,Route, Switch} from 'react-router-dom';\r\nimport {Home} from './Home';\r\nimport {About} from './About';\r\nimport {Contact} from './Contact';\r\nimport {Projects} from './Projects';\r\nimport {NoMatch} from './NoMatch';\r\nimport {Layout} from './components/Layout';\r\nimport {NaviBar} from './components/NaviBar'\r\n\r\n\r\nclass App extends Component{\r\n  render(){\r\n  return (\r\n  <React.Fragment>\r\n  <NaviBar/>\r\n      <Layout>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home}/>\r\n          <Route path=\"/About\" component={About}/>\r\n          <Route path=\"/projects\" component={Projects}/>\r\n          <Route path=\"/Contact\" component={Contact}/>\r\n          <Route component={NoMatch}/>\r\n        </Switch>\r\n      </Router>\r\n    </Layout>\r\n  </React.Fragment>\r\n  );\r\n}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}